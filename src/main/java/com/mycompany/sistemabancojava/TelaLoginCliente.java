package com.mycompany.sistemabancojava;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;


public class TelaLoginCliente extends javax.swing.JFrame {
    // Nessa parte estou guardando em uma variável o número da conta.
    // Isso é necessário pois precisamos da conta para associar aos botões.
        private String numeroConta;
    
     public void setNumeroConta(String numeroConta) {
        this.numeroConta = numeroConta;        
    }
    
    public TelaLoginCliente(String numeroConta ) {
        this.numeroConta = numeroConta;
        initComponents();
        
        //Desativei o nome da conta ao logar, pois perdi o conteúdo na tela.
        // lblBemvindo.setText("Bem-vindo, conta " + numeroConta);
              
        carregarTitulares(); // Chama o método para preencher a combobox com os titulares

    }
    
    private void carregarTitulares() {
    // Toda pesquisa precisa ser feita diretamente no banco de dados.
    String query = "SELECT titular, conta FROM clientes";
        try (Connection con = DataBaseConnection.getConnection();
             PreparedStatement pst = con.prepareStatement(query);
             ResultSet rs = pst.executeQuery()) {

            while (rs.next()) {
                String titular = rs.getString("titular");
                String conta = rs.getString("conta");
                cbTransferir.addItem(titular + " - " + conta);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar titulares: " + e.getMessage());
        }
}
    private void preencherComboBoxTransferir() {
        String query = "SELECT conta FROM clientes WHERE conta <> ?";
        try (Connection con = DataBaseConnection.getConnection();
             PreparedStatement pst = con.prepareStatement(query)) {

            pst.setString(1, numeroConta);
            ResultSet rs = pst.executeQuery();

            cbTransferir.removeAllItems();
            while (rs.next()) {
                cbTransferir.addItem(rs.getString("conta"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao preencher contas de transferência: " + e.getMessage());
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBemvindo = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnSaldo = new javax.swing.JButton();
        txtSaldo = new javax.swing.JTextField();
        btnSaque = new javax.swing.JButton();
        txtSaque = new javax.swing.JTextField();
        btnDeposito = new javax.swing.JButton();
        txtDeposito = new javax.swing.JTextField();
        btnTransferir = new javax.swing.JButton();
        txtTransferir = new javax.swing.JTextField();
        cbTransferir = new javax.swing.JComboBox<>();
        btnSair = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(176, 196, 222));
        setPreferredSize(new java.awt.Dimension(500, 400));

        jPanel1.setBackground(new java.awt.Color(30, 144, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 400));

        btnSaldo.setBackground(new java.awt.Color(54, 54, 54));
        btnSaldo.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        btnSaldo.setForeground(new java.awt.Color(255, 255, 255));
        btnSaldo.setText("Saldo");
        btnSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaldoActionPerformed(evt);
            }
        });

        txtSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSaldoActionPerformed(evt);
            }
        });

        btnSaque.setBackground(new java.awt.Color(54, 54, 54));
        btnSaque.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        btnSaque.setForeground(new java.awt.Color(255, 255, 255));
        btnSaque.setText("Saque");
        btnSaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaqueActionPerformed(evt);
            }
        });

        txtSaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSaqueActionPerformed(evt);
            }
        });

        btnDeposito.setBackground(new java.awt.Color(54, 54, 54));
        btnDeposito.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        btnDeposito.setForeground(new java.awt.Color(255, 255, 255));
        btnDeposito.setText("Depósito");
        btnDeposito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositoActionPerformed(evt);
            }
        });

        txtDeposito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepositoActionPerformed(evt);
            }
        });

        btnTransferir.setBackground(new java.awt.Color(54, 54, 54));
        btnTransferir.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        btnTransferir.setForeground(new java.awt.Color(255, 255, 255));
        btnTransferir.setText("Transferir");
        btnTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferirActionPerformed(evt);
            }
        });

        txtTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTransferirActionPerformed(evt);
            }
        });

        cbTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTransferirActionPerformed(evt);
            }
        });

        btnSair.setBackground(new java.awt.Color(54, 54, 54));
        btnSair.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        btnSair.setForeground(new java.awt.Color(255, 255, 255));
        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel1.setText("Bem-vindo ao painel de transações");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaque, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSaque, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(txtSaldo))
                        .addGap(46, 46, 46))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSair)))
                            .addComponent(txtDeposito))
                        .addGap(43, 43, 43))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaldo)
                    .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaque)
                    .addComponent(txtSaque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeposito)
                    .addComponent(txtDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTransferir)
                    .addComponent(txtTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSair)
                .addContainerGap(130, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(lblBemvindo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBemvindo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void txtSaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSaqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSaqueActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        
        // Fecha todas as outras instâncias de janelas abertas
    java.awt.Window win[] = java.awt.Window.getWindows();
    for (int i = 0; i < win.length; i++) {
        win[i].dispose();
    }
    // Abre a TelaLoginPrincipal
    new TelaLoginPrincipal().setVisible(true);
    dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaldoActionPerformed
       String query = "SELECT saldo FROM clientes WHERE conta = ?";
        try (Connection con = DataBaseConnection.getConnection();
             PreparedStatement pst = con.prepareStatement(query)) {

            pst.setString(1, numeroConta);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                double saldo = rs.getDouble("saldo");
                txtSaldo.setText(String.valueOf(saldo));
            } else {
                JOptionPane.showMessageDialog(this, "Conta não encontrada.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao consultar saldo: " + e.getMessage());
        }
    }//GEN-LAST:event_btnSaldoActionPerformed

    private void btnSaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaqueActionPerformed
    String querySaldo = "SELECT saldo FROM clientes WHERE conta = ?";
    String querySaque = "UPDATE clientes SET saldo = saldo - ? WHERE conta = ?";
    double valorSaque = Double.parseDouble(txtSaque.getText());

    try (Connection con = DataBaseConnection.getConnection();
         PreparedStatement pstSaldo = con.prepareStatement(querySaldo)) {

        // Obter o saldo atual
        pstSaldo.setString(1, numeroConta);
        ResultSet rs = pstSaldo.executeQuery();

        if (rs.next()) {
            double saldoAtual = rs.getDouble("saldo");

            // Verificar se o saldo é suficiente
            if (valorSaque > saldoAtual) {
                JOptionPane.showMessageDialog(this, "Saldo insuficiente.");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Conta não encontrada.");
            return;
        }

        // Prosseguir com o saque
        try (PreparedStatement pstSaque = con.prepareStatement(querySaque)) {
            pstSaque.setDouble(1, valorSaque);
            pstSaque.setString(2, numeroConta);

            int result = pstSaque.executeUpdate();

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Saque realizado com sucesso.");
                btnSaldoActionPerformed(evt); // Atualiza o saldo
                txtSaque.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao realizar saque.");
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao realizar saque: " + e.getMessage());
    }
    }//GEN-LAST:event_btnSaqueActionPerformed

    private void btnDepositoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepositoActionPerformed
        String query = "UPDATE clientes SET saldo = saldo + ? WHERE conta = ?";
        double valorDeposito = Double.parseDouble(txtDeposito.getText());
        try (Connection con = DataBaseConnection.getConnection();
             PreparedStatement pst = con.prepareStatement(query)) {

            pst.setDouble(1, valorDeposito);
            pst.setString(2, numeroConta);

            int result = pst.executeUpdate();

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Depósito realizado com sucesso.");
                btnSaldoActionPerformed(evt); // Atualiza o saldo
                txtDeposito.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao realizar depósito.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao realizar depósito: " + e.getMessage());
        }
    }//GEN-LAST:event_btnDepositoActionPerformed

    private void btnTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferirActionPerformed
    String contaDestinoItem = (String) cbTransferir.getSelectedItem();
        if (contaDestinoItem == null || contaDestinoItem.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione uma conta para transferir.");
            return;
        }

        String[] parts = contaDestinoItem.split(" - ");
        String contaDestino = parts[1];
        double valorTransferencia = Double.parseDouble(txtTransferir.getText());

        String querySaldo = "SELECT saldo FROM clientes WHERE conta = ?";
        String querySaida = "UPDATE clientes SET saldo = saldo - ? WHERE conta = ?";
        String queryEntrada = "UPDATE clientes SET saldo = saldo + ? WHERE conta = ?";

        try (Connection con = DataBaseConnection.getConnection()) {
            con.setAutoCommit(false);  // Inicia a transação

            try (PreparedStatement pstSaldo = con.prepareStatement(querySaldo)) {
                // Verificar o saldo atual
                pstSaldo.setString(1, numeroConta);
                ResultSet rs = pstSaldo.executeQuery();

                if (rs.next()) {
                    double saldoAtual = rs.getDouble("saldo");

                    // Verificar se o saldo é suficiente
                    if (valorTransferencia > saldoAtual) {
                        JOptionPane.showMessageDialog(this, "Saldo insuficiente.");
                        con.rollback();
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Conta não encontrada.");
                    con.rollback();
                    return;
                }

                // Prosseguir com a transferência
                try (PreparedStatement pstSaida = con.prepareStatement(querySaida);
                     PreparedStatement pstEntrada = con.prepareStatement(queryEntrada)) {

                    // Subtrair saldo da conta de origem
                    pstSaida.setDouble(1, valorTransferencia);
                    pstSaida.setString(2, numeroConta);
                    int resultSaida = pstSaida.executeUpdate();

                    // Adicionar saldo à conta de destino
                    pstEntrada.setDouble(1, valorTransferencia);
                    pstEntrada.setString(2, contaDestino);
                    int resultEntrada = pstEntrada.executeUpdate();

                    if (resultSaida > 0 && resultEntrada > 0) {
                        con.commit();  // Confirma a transação
                        JOptionPane.showMessageDialog(this, "Transferência realizada com sucesso.");
                        btnSaldoActionPerformed(evt); // Atualiza o saldo
                         txtTransferir.setText(""); // Limpa o campo de transferência
                    } else {
                        con.rollback();  // Reverte a transação
                        JOptionPane.showMessageDialog(this, "Erro ao realizar transferência.");
                    }
                }
            } catch (SQLException e) {
                con.rollback();  // Reverte a transação em caso de erro
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao realizar transferência: " + e.getMessage());
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados: " + e.getMessage());
        }
    }//GEN-LAST:event_btnTransferirActionPerformed

    private void txtSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSaldoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSaldoActionPerformed

    private void txtDepositoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepositoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepositoActionPerformed

    private void txtTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTransferirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTransferirActionPerformed

    private void cbTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTransferirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTransferirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                             String numeroConta = ""; // Exemplo de número de conta

                new TelaLoginCliente(numeroConta).setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeposito;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSaldo;
    private javax.swing.JButton btnSaque;
    private javax.swing.JButton btnTransferir;
    private javax.swing.JComboBox<String> cbTransferir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblBemvindo;
    private javax.swing.JTextField txtDeposito;
    private javax.swing.JTextField txtSaldo;
    private javax.swing.JTextField txtSaque;
    private javax.swing.JTextField txtTransferir;
    // End of variables declaration//GEN-END:variables
}
